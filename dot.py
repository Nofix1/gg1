import telebot
from telebot import types
import firebase_admin
from firebase_admin import credentials, db
import random
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
cred = credentials.Certificate('database-65f4e-firebase-adminsdk-x7hj9-c913ba6a34.json')
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://database-65f4e-default-rtdb.firebaseio.com/'
})

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7424641182:AAG5Wh77L20nqWdw_zrtzC2jHrKIJbO3bYE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAIN_MENU = 'main_menu'
PROFILE_MENU = 'profile_menu'
PLAY_MENU = 'play_menu'
DAILY_BONUS = 'daily_bonus'
BACK_BUTTON_TEXT = '–ù–∞–∑–∞–¥'

# –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_path(user_id):
    return f'users/{user_id}'

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id):
    user_ref = db.reference(get_user_path(user_id))
    if not user_ref.get():
        user_ref.set({
            'id': user_id,
            'wins': 0,
            'losses': 0,
            'balance': 0,
            'last_bonus': 0
        })

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    register_user(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_play = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å")
    btn_profile = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    btn_top = types.KeyboardButton("–¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤")
    markup.add(btn_play, btn_profile, btn_top)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id
    register_user(user_id)

    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        show_profile(message)
    elif message.text == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å":
        give_daily_bonus(message)
    elif message.text == "–ò–≥—Ä–∞—Ç—å":
        show_play_menu(message)
    elif message.text == "–¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤":
        show_top_players(message)
    elif message.text.startswith("/mines"):
        handle_mines_game(message)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.", reply_markup=get_main_menu())

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_play = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å")
    btn_profile = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    btn_top = types.KeyboardButton("–¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤")
    markup.add(btn_play, btn_profile, btn_top)
    return markup

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def show_profile(message):
    user_id = message.from_user.id
    user_ref = db.reference(get_user_path(user_id))
    user_data = user_ref.get()

    profile_text = (
        f"–í–∞—à id: {user_data['id']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ò–≥—Ä: {user_data['wins']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ò–≥—Ä: {user_data['losses']}\n"
        f"–ë–∞–ª–∞–Ω—Å –°–∞—à–∫–æ: {user_data['balance']}"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_bonus = types.KeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å")
    btn_back = types.KeyboardButton(BACK_BUTTON_TEXT)
    markup.add(btn_bonus)
    markup.add(btn_back)

    bot.send_message(message.chat.id, profile_text, reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞—á–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
def give_daily_bonus(message):
    user_id = message.from_user.id
    user_ref = db.reference(get_user_path(user_id))
    user_data = user_ref.get()

    current_time = int(time.time())
    last_bonus = user_data.get('last_bonus', 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥)
    if current_time - last_bonus >= 86400:
        bonus = random.randint(1, 10)
        new_balance = user_data.get('balance', 0) + bonus
        user_ref.update({
            'balance': new_balance,
            'last_bonus': current_time
        })
        bot.send_message(message.chat.id, f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus} –°–∞—à–∫–æ!")
    else:
        remaining = 86400 - (current_time - last_bonus)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        seconds = remaining % 60
        bot.send_message(message.chat.id, f"‚ùå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {hours}—á {minutes}–º {seconds}—Å.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
def show_play_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_mines = types.KeyboardButton("Mines")
    btn_blackjack = types.KeyboardButton("BlackJack")
    btn_back = types.KeyboardButton(BACK_BUTTON_TEXT)
    markup.add(btn_mines, btn_blackjack)
    markup.add(btn_back)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–≥—Ä—É:", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
def show_top_players(message):
    users_ref = db.reference('users')
    users = users_ref.order_by_child('wins').limit_to_last(10).get()

    if not users:
        bot.send_message(message.chat.id, "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    sorted_users = sorted(users.items(), key=lambda x: x[1]['wins'], reverse=True)

    top_text = "üèÜ –¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤ üèÜ\n"
    for idx, (uid, data) in enumerate(sorted_users, start=1):
        top_text += f"{idx}. ID: {uid} - –í—ã–∏–≥—Ä—ã—à–µ–π: {data.get('wins',0)}\n"

    bot.send_message(message.chat.id, top_text, reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.message_handler(func=lambda message: message.text == BACK_BUTTON_TEXT)
def handle_back(message):
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –ò–≥—Ä–∞ Mines - –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
def handle_mines_game(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    msg = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω (–æ—Ç 3 –¥–æ 24):")
    bot.register_next_step_handler(msg, process_mines_quantity)

def process_mines_quantity(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        mines = int(message.text)
        if not 3 <= mines <= 24:
            raise ValueError
    except ValueError:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 24:")
        bot.register_next_step_handler(msg, process_mines_quantity)
        return

    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É –°–∞—à–∫–æ (–æ—Ç 1 –¥–æ 100):")
    bot.register_next_step_handler(msg, lambda m: process_mines_bet(m, mines))

def process_mines_bet(message, mines):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        bet = int(message.text)
        if not 1 <= bet <= 100:
            raise ValueError
    except ValueError:
        msg = bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100:")
        bot.register_next_step_handler(msg, lambda m: process_mines_bet(m, mines))
        return

    user_ref = db.reference(get_user_path(user_id))
    user_data = user_ref.get()

    if user_data['balance'] < bet:
        bot.send_message(chat_id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—Ç–∞–≤–∫—É
    user_ref.update({'balance': user_data['balance'] - bet})

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    total_buttons = 25
    safe_buttons = total_buttons - mines
    bombs = random.sample(range(total_buttons), mines)
    crystals = [i for i in range(total_buttons) if i not in bombs]
    crystals = random.sample(crystals, safe_buttons)

    game_state = {
        'mines': bombs,
        'crystals': crystals,
        'current_win': 0,
        'bet': bet,
        'opened': [],
        'active': True
    }

    game_ref = db.reference(f'games/{user_id}')
    game_ref.set(game_state)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    send_mines_board(chat_id, user_id)

def send_mines_board(chat_id, user_id):
    game_ref = db.reference(f'games/{user_id}')
    game = game_ref.get()

    if not game or not game.get('active', False):
        bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    current_win = game.get('current_win', 0)
    text = f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–¢–µ–∫—É—â–∏–π –í—ã–π–≥—Ä—ã—à: {current_win} –°–∞—à–∫–æ"

    markup = types.InlineKeyboardMarkup(row_width=5)
    for i in range(25):
        if i in game.get('opened', []):
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–æ—Ä–æ–±–∫–∏
            content = "üíé" if i in game['crystals'] else "üß®"
            button = types.InlineKeyboardButton(content, callback_data=f'open_{i}')
        else:
            button = types.InlineKeyboardButton("üéÅ", callback_data=f'open_{i}')
        markup.add(button)

    # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
    stop_button = types.InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—èüõë", callback_data='stop_game')
    markup.add(stop_button)

    bot.send_message(chat_id, text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ Inline Keyboard
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    data = call.data

    game_ref = db.reference(f'games/{user_id}')
    game = game_ref.get()

    if not game or not game.get('active', False):
        bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    if data.startswith('open_'):
        index = int(data.split('_')[1])
        if index in game.get('opened', []):
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–æ—Ä–æ–±–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")
            return

        game['opened'].append(index)

        if index in game['mines']:
            # –ü—Ä–æ–∏–≥—Ä—ã—à
            game['active'] = False
            game_ref.set(game)
            reveal_field(chat_id, user_id, lost=True)
            update_user_stats(user_id, lost=True)
            bot.answer_callback_query(call.id, "üí• –ë–∞—Ö! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
            return
        else:
            # –í—ã–∏–≥—Ä—ã—à
            game['current_win'] += 1
            game_ref.set(game)
            bot.answer_callback_query(call.id, f"üíé –í—ã –Ω–∞—à–ª–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª! –¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {game['current_win']} –°–∞—à–∫–æ")
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –≤—ã–∏–≥—Ä—ã—à–µ–º
            send_mines_board(chat_id, user_id)
    elif data == 'stop_game':
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
        winnings = game.get('current_win', 0) * game.get('bet',1)
        game['active'] = False
        game_ref.set(game)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_ref = db.reference(get_user_path(user_id))
        user_data = user_ref.get()
        user_ref.update({'balance': user_data['balance'] + winnings, 'wins': user_data.get('wins',0) + 1})

        bot.edit_message_text(
            f"–í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –°–∞—à–∫–æ.",
            chat_id=chat_id,
            message_id=call.message.message_id
        )
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

def reveal_field(chat_id, user_id, lost=False):
    game_ref = db.reference(f'games/{user_id}')
    game = game_ref.get()

    markup = types.InlineKeyboardMarkup(row_width=5)
    for i in range(25):
        if i in game['opened']:
            content = "üíé" if i in game['crystals'] else "üß®"
        else:
            if lost:
                content = "üíé" if i in game['crystals'] else "üß®"
            else:
                content = "üéÅ"
        button = types.InlineKeyboardButton(content, callback_data='noop')
        markup.add(button)

    bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=markup)
    if lost:
        bot.send_message(chat_id, "üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í—Å–µ –±–æ–º–±—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã.")
    # –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    db.reference(f'games/{user_id}').delete()

def update_user_stats(user_id, lost=False):
    user_ref = db.reference(get_user_path(user_id))
    if lost:
        user_ref.update({'losses': db.ServerValue.increment(1)})
    else:
        user_ref.update({'wins': db.ServerValue.increment(1)})

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
