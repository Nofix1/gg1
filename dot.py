import telebot
from telebot import types
import sqlite3
import random
import time
import datetime
import threading
import json
import os

# ==================== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====================
TOKEN = '7424641182:AAG5Wh77L20nqWdw_zrtzC2jHrKIJbO3bYE'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
DB_NAME = 'bot_database.db'    # –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

# ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö ====================
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            wins INTEGER DEFAULT 0,
            losses INTEGER DEFAULT 0,
            balance INTEGER DEFAULT 0,
            last_bonus INTEGER DEFAULT 0
        )
    ''')

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS games (
            user_id INTEGER PRIMARY KEY,
            mine_count INTEGER,
            bet INTEGER,
            field TEXT,
            current_winnings INTEGER DEFAULT 0,
            opened_indices TEXT
        )
    ''')

    conn.commit()
    conn.close()

# ==================== –†–∞–±–æ—Ç–∞ —Å –ë–∞–∑–æ–π –î–∞–Ω–Ω—ã—Ö ====================
def register_user(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    if cursor.fetchone() is None:
        cursor.execute('INSERT INTO users (user_id) VALUES (?)', (user_id,))
        conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return {
            'user_id': row[0],
            'wins': row[1],
            'losses': row[2],
            'balance': row[3],
            'last_bonus': row[4]
        }
    return None

def update_user(user_id, **kwargs):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    fields = ', '.join([f"{k} = ?" for k in kwargs.keys()])
    values = list(kwargs.values())
    values.append(user_id)
    query = f'UPDATE users SET {fields} WHERE user_id = ?'
    cursor.execute(query, tuple(values))
    conn.commit()
    conn.close()

def get_top_players(limit=10):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT user_id, wins FROM users ORDER BY wins DESC LIMIT ?', (limit,))
    rows = cursor.fetchall()
    conn.close()
    return rows

def get_game(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM games WHERE user_id = ?', (user_id,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return {
            'user_id': row[0],
            'mine_count': row[1],
            'bet': row[2],
            'field': json.loads(row[3]),
            'current_winnings': row[4],
            'opened_indices': json.loads(row[5])
        }
    return None

def create_game(user_id, mine_count, bet):
    field = ['üíé'] * (25 - mine_count) + ['üß®'] * mine_count
    random.shuffle(field)
    opened_indices = []
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO games (user_id, mine_count, bet, field, current_winnings, opened_indices)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, mine_count, bet, json.dumps(field), 0, json.dumps(opened_indices)))
    conn.commit()
    conn.close()

def update_game(user_id, **kwargs):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    fields = ', '.join([f"{k} = ?" for k in kwargs.keys()])
    values = []
    for k, v in kwargs.items():
        if isinstance(v, list):
            v = json.dumps(v)
        values.append(v)
    values.append(user_id)
    query = f'UPDATE games SET {fields} WHERE user_id = ?'
    cursor.execute(query, tuple(values))
    conn.commit()
    conn.close()

def delete_game(user_id):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('DELETE FROM games WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

# ==================== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–æ—Ç–∞ ====================
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
init_db()

# ==================== –•—ç–Ω–¥–ª–µ—Ä—ã –ö–æ–º–∞–Ω–¥ ====================

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    register_user(user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_play = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å")
    btn_profile = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    btn_top = types.KeyboardButton("–¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤")
    markup.add(btn_play, btn_profile, btn_top)

    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# ==================== –•—ç–Ω–¥–ª–µ—Ä—ã –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –°–æ–æ–±—â–µ–Ω–∏–π ====================

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id
    register_user(user_id)

    if message.text == "–ü—Ä–æ—Ñ–∏–ª—å":
        show_profile(message)
    elif message.text == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å":
        give_daily_bonus(message)
    elif message.text == "–ò–≥—Ä–∞—Ç—å":
        show_play_menu(message)
    elif message.text == "–¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤":
        show_top_players(message)
    elif message.text.lower() == "–Ω–∞–∑–∞–¥":
        show_main_menu(message)
    elif message.text.lower() in ["mines", "–º–∞–π–Ω—Å", "mines"]:
        start_mines_game(message)
    else:
        bot.send_message(
            message.chat.id,
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )

# ==================== –§—É–Ω–∫—Ü–∏–∏ –û—Å–Ω–æ–≤–Ω—ã—Ö –ú–µ–Ω—é ====================

def get_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_play = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å")
    btn_profile = types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å")
    btn_top = types.KeyboardButton("–¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤")
    markup.add(btn_play, btn_profile, btn_top)
    return markup

def show_main_menu(message):
    markup = get_main_menu()
    bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=markup
    )

def show_profile(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    profile_text = (
        f"üìÑ **–ü—Ä–æ—Ñ–∏–ª—å**\n"
        f"**–í–∞—à ID:** {user['user_id']}\n"
        f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –í—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ò–≥—Ä:** {user['wins']}\n"
        f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö –ò–≥—Ä:** {user['losses']}\n"
        f"**–ë–∞–ª–∞–Ω—Å –°–∞—à–∫–æ:** {user['balance']}\n"
    )

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn_bonus = types.KeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ë–æ–Ω—É—Å")
    btn_back = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(btn_bonus, btn_back)

    bot.send_message(
        message.chat.id,
        profile_text,
        parse_mode="Markdown",
        reply_markup=markup
    )

def give_daily_bonus(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    current_timestamp = int(time.time())
    last_bonus = user['last_bonus']
    seconds_in_day = 86400

    if current_timestamp - last_bonus >= seconds_in_day:
        bonus = random.randint(1, 10)
        new_balance = user['balance'] + bonus
        update_user(user_id, balance=new_balance, last_bonus=current_timestamp)
        bot.send_message(
            message.chat.id,
            f"üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ **{bonus} –°–∞—à–∫–æ**!",
            parse_mode="Markdown"
        )
    else:
        remaining = seconds_in_day - (current_timestamp - last_bonus)
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        seconds = remaining % 60
        bot.send_message(
            message.chat.id,
            f"‚è≥ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ **{hours}—á {minutes}–º {seconds}—Å**.",
            parse_mode="Markdown"
        )

def show_play_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn_mines = types.KeyboardButton("Mines")
    btn_blackjack = types.KeyboardButton("BlackJack")
    btn_back = types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.add(btn_mines, btn_blackjack)
    markup.add(btn_back)
    bot.send_message(
        message.chat.id,
        "üé≤ **–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–≥—Ä—É:**",
        parse_mode="Markdown",
        reply_markup=markup
    )

def show_top_players(message):
    top_players = get_top_players()

    if not top_players:
        bot.send_message(
            message.chat.id,
            "üèÖ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–∫–∞ –ø—É—Å—Ç."
        )
        return

    top_text = "üèÜ **–¢–æ–ø –ò–≥—Ä–æ–∫–æ–≤ üèÜ**\n\n"
    for idx, (uid, wins) in enumerate(top_players, start=1):
        top_text += f"{idx}. **ID:** {uid} - **–í—ã–∏–≥—Ä—ã—à–µ–π:** {wins}\n"

    bot.send_message(
        message.chat.id,
        top_text,
        parse_mode="Markdown",
        reply_markup=get_main_menu()
    )

# ==================== –ò–≥—Ä–∞ Mines ====================

def start_mines_game(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–≥—Ä–µ
    if get_game(user_id):
        bot.send_message(
            message.chat.id,
            "‚ùå –í—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–≥—Ä—ã Mines. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π."
        )
        return

    msg = bot.send_message(
        message.chat.id,
        "üß® **–ò–≥—Ä–∞ Mines**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω (–æ—Ç **3** –¥–æ **24**):",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(msg, process_mines_quantity)

def process_mines_quantity(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        mine_count = int(message.text)
        if not 3 <= mine_count <= 24:
            raise ValueError
    except ValueError:
        msg = bot.send_message(
            chat_id,
            "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç **3** –¥–æ **24**.",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(msg, process_mines_quantity)
        return

    msg = bot.send_message(
        chat_id,
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É (–æ—Ç **1** –¥–æ **100** –°–∞—à–∫–æ):",
        parse_mode="Markdown"
    )
    bot.register_next_step_handler(msg, lambda m: process_mines_bet(m, mine_count))

def process_mines_bet(message, mine_count):
    user_id = message.from_user.id
    chat_id = message.chat.id
    try:
        bet = int(message.text)
        if not 1 <= bet <= 100:
            raise ValueError
    except ValueError:
        msg = bot.send_message(
            chat_id,
            "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å—Ç–∞–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç **1** –¥–æ **100**.",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(msg, lambda m: process_mines_bet(m, mine_count))
        return

    user = get_user(user_id)
    if user['balance'] < bet:
        bot.send_message(
            chat_id,
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏."
        )
        return

    # –í—ã—á–∏—Ç–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    update_user(user_id, balance=user['balance'] - bet)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    create_game(user_id, mine_count, bet)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
    send_mines_board(chat_id, user_id)

def send_mines_board(chat_id, user_id):
    game = get_game(user_id)
    if not game:
        bot.send_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –∏–≥—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    current_winnings = game['current_winnings']
    bet = game['bet']

    text = f"üß® **–ò–≥—Ä–∞ Mines –ù–∞—á–∞–ª–∞—Å—å!**\n\n**–¢–µ–∫—É—â–∏–π –í—ã–∏–≥—Ä—ã—à:** {current_winnings} –°–∞—à–∫–æ"

    markup = types.InlineKeyboardMarkup(row_width=5)
    for i in range(25):
        if i in game['opened_indices']:
            content = game['field'][i]
        else:
            content = "üéÅ"
        # Callback data —Å–æ–¥–µ—Ä–∂–∏—Ç user_id –∏ –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏
        callback_data = f"{user_id}:{i}"
        button = types.InlineKeyboardButton(content, callback_data=callback_data)
        markup.add(button)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—èüõë" –≤ –∫–æ–Ω—Ü–µ
    stop_button = types.InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data=f"{user_id}:stop")
    markup.add(stop_button)

    bot.send_message(
        chat_id,
        text,
        parse_mode="Markdown",
        reply_markup=markup
    )

# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ Callback –ó–∞–ø—Ä–æ—Å–æ–≤ ====================
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        data = call.data.split(':')
        user_id = int(data[0])
        action = data[1]
    except (IndexError, ValueError):
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ–º –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if call.from_user.id != user_id:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞.")
        return

    game = get_game(user_id)
    if not game:
        bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ.")
        return

    chat_id = call.message.chat.id

    if action == 'stop':
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –ø–æ–±–µ–¥–æ–π
        winnings = game['current_winnings'] * game['bet']
        update_user(user_id, balance=get_user(user_id)['balance'] + winnings, wins=get_user(user_id)['wins'] + 1)
        delete_game(user_id)

        bot.edit_message_text(
            f"‚úÖ –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –∏ –∑–∞–±—Ä–∞–ª–∏ **{winnings} –°–∞—à–∫–æ**.",
            chat_id=chat_id,
            message_id=call.message.message_id,
            parse_mode="Markdown",
            reply_markup=None
        )
        bot.answer_callback_query(call.id, "‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    try:
        index = int(action)
    except ValueError:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    if index < 0 or index >= 25:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
        return

    if index in game['opened_indices']:
        bot.answer_callback_query(call.id, "‚ùå –≠—Ç–∞ –∫–æ—Ä–æ–±–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
    game['opened_indices'].append(index)
    update_game(user_id, opened_indices=game['opened_indices'])

    if game['field'][index] == 'üß®':
        # –ü—Ä–æ–∏–≥—Ä—ã—à
        update_user(user_id, losses=get_user(user_id)['losses'] + 1)
        delete_game(user_id)

        # –†–∞—Å–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–≥–æ –ø–æ–ª—è
        reveal_field(chat_id, game)

        bot.answer_callback_query(call.id, "üí• –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –º–∏–Ω—É! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")
    else:
        # –í—ã–∏–≥—Ä—ã—à
        game['current_winnings'] += 1
        update_game(user_id, current_winnings=game['current_winnings'])
        bot.answer_callback_query(call.id, f"üíé –í—ã –Ω–∞—à–ª–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª! –¢–µ–∫—É—â–∏–π –≤—ã—Ä—É—á–∫–∞: {game['current_winnings']} –°–∞—à–∫–æ.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
        total_crystals = 25 - game['mine_count']
        if game['current_winnings'] == total_crystals:
            # –ü–æ–±–µ–¥–∞
            winnings = game['current_winnings'] * game['bet']
            update_user(user_id, balance=get_user(user_id)['balance'] + winnings, wins=get_user(user_id)['wins'] + 1)
            delete_game(user_id)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è —Å —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤
            reveal_field(chat_id, game, won=True)

            bot.edit_message_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ **{winnings} –°–∞—à–∫–æ**!",
                chat_id=chat_id,
                message_id=call.message.message_id,
                parse_mode="Markdown",
                reply_markup=None
            )
            bot.answer_callback_query(call.id, "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        edit_game_message(call.message, game)

def edit_game_message(message, game):
    chat_id = message.chat.id
    current_winnings = game['current_winnings']

    markup = types.InlineKeyboardMarkup(row_width=5)
    for i in range(25):
        if i in game['opened_indices']:
            content = game['field'][i]
        else:
            content = "üéÅ"
        callback_data = f"{game['user_id']}:{i}"
        button = types.InlineKeyboardButton(content, callback_data=callback_data)
        markup.add(button)

    stop_button = types.InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data=f"{game['user_id']}:stop")
    markup.add(stop_button)

    bot.edit_message_reply_markup(
        chat_id=chat_id,
        message_id=message.message_id,
        reply_markup=markup
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_text(
        f"üß® **–ò–≥—Ä–∞ Mines**\n\n**–¢–µ–∫—É—â–∏–π –í—ã–∏–≥—Ä—ã—à:** {current_winnings} –°–∞—à–∫–æ",
        chat_id=chat_id,
        message_id=message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

def reveal_field(chat_id, game, won=False):
    markup = types.InlineKeyboardMarkup(row_width=5)
    for i in range(25):
        content = game['field'][i]
        button = types.InlineKeyboardButton(content, callback_data='noop')  # –ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        markup.add(button)

    if won:
        text = f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ **{game['current_winnings'] * game['bet']} –°–∞—à–∫–æ**!"
    else:
        text = "üí• –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í—Å–µ –º–∏–Ω–∞—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã."

    bot.edit_message_text(
        text,
        chat_id=chat_id,
        message_id=bot.get_updates()[-1].message.message_id,  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode="Markdown",
        reply_markup=markup
    )

# ==================== –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞ ====================
def run_bot():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    bot.infinity_polling()

if __name__ == "__main__":
    run_bot()
    
